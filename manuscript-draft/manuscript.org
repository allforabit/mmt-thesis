#+SETUPFILE: ../meta/setup.org

* Introduction
** Motivation
** Project goals
** Structure of thesis

* Background

** DAW analog metaphors
One of the primary tools used by electronic musicians today for the production of music is DAW and it's inherent metaphors based on analog system still reign supreme in the field cite:bell_journal_2015. The familiar concepts of analog tape machines and mixers benefit the novice user by offering a network of familiar and tangible real world metaphors in which to carry out their creative work. However, as well as the benefits that these types of metaphors bring, they also impose some limitations and bring about certain biases. Musical ideas that are difficult to realise can be left unexplored. 

A particular criticism of the DAW is the difficulty in maintaining and managing the editing of complex automation information. Automation is the term given to the continuous altering of aspects of the sound and is usually represented in lanes separate to the primary note pitch information. It may be recorded in or drawn in by the producer. Difficulties can arise, when multiple subtly interacting lines of automation, such as pitch bends and filter changes are being manipulated. William Coleman gives a particularly clear example of this and outlines the difficulty of representing "portamento time", the time it takes a note to slide from one to the next. The visual results can be jarring, unintuitive and not reflective of the audio results. 

Duignan (2008) describes a similar problem in his study that monitored professional producers working in DAW environments [[cite:duignan_computer_2008][p. 156]]. The particular problem identified by Duignan was that of processing one off effects for single musical events. A number of convoluted processes were observed, including bouncing the affected portion to audio, duplicating the track, setting up a particular auxiliary for the effect and controlling the effect with automation. In these cases, the hierarchy imposed by the DAW gets in the way, where it could be modeled quite elegantly in a more open program such as Max Msp. This, unfortunately, raises the issue of drifting into the area of analytic thinking and away from creative thinking, a combination that John Cage advises against: "Don't try to create and analyse at the same time. They're different processes." cite:popova_10_2012 The need to explore alternative metaphors is clear. A description of a promising alternative metaphor, that of drawing/sketching will now be discussed.

** Legacy systems
:NOTES:
 * Oramics
 * UPIC
:END:

** Golan Levin et al


* Similar work

* TODO My approach [0/2]
:NOTES:
 - [ ] Come up with a title
 - [ ] Other stuff
:END:

** Adding allowances for stylus
** Key specifications
** Paper.js
** Tone.js
* Execution
** Early prototypes
*** Melodypainter

Thus far, some early test prototypes to establish possible directions for the
application have been built. A Max Msp patch was created which allows the user
to draw freehand lines, which are converted into break point function data and
used as to generate a melodic profile in Bach. This is further processed into a
pentatonic scale. Once input the system plays the resulting melody back. A
notable flaw of the system was that it required users to draw shapes in a
generally horizontal fashion for the data to be of use and to create a strong
relationship between the visuals and the generated music.

*** Sonicsketch - shape recognition
A separate application was created in Processing which allowed users to draw
shapes, using either mouse or ideally, pen input and have a sound that is
associated with each shape played back. As the sound of each shape plays back,
it is lit up using animation, creating a strong connection between the shape and
it's resulting sound. The application used the "gesture variation follower"
system cite:caramiaux_adaptive_2015, which while promising in principle, didn't
have a high rate of accuracy in recognizing the shapes. It is for this reason
that Microsoft's ink api is now being used for further prototyping.

** Actual build out
*** Advantages of the react.js model of UI programming
