#+SETUPFILE: ../meta/setup.org

* Introduction
** Motivations
Some primary motivations for the creation of the app are as follows (in no
particular order):
 - Draw attention to concept of more graphically oriented interfaces for
   synthesis (UPIC) to a wider audience by presenting the app in a very
   accessible format (PWA)
 - Explore the advantages and limitations of prototyping an experimental
   interface using web technologies
 - Frustration with the creative flow of commercial DAW applications
 - Over representation of analog type metaphors in both DAW applications and in
   the web apps being developed (missed opportunity)
 - Use functional programming techniques such as immutable data structures to
   ease the complexity of managing fundamental concerns such as undo.
 
** Project goals
** Structure of thesis

* Background

** DAW analog metaphors
One of the primary tools used by electronic musicians today for the production
of music is DAW and it's inherent metaphors based on analog system still reign
supreme in the field cite:bell_journal_2015. The familiar concepts of analog
tape machines and mixers benefit the novice user by offering a network of
familiar and tangible real world metaphors in which to carry out their creative
work. However, as well as the benefits that these types of metaphors bring, they
also impose some limitations and bring about certain biases. Musical ideas that
are difficult to realise can be left unexplored.

A particular criticism of the DAW is the difficulty in maintaining and managing
the editing of complex automation information. Automation is the term given to
the continuous altering of aspects of the sound and is usually represented in
lanes separate to the primary note pitch information. It may be recorded in or
drawn in by the producer. Difficulties can arise, when multiple subtly
interacting lines of automation, such as pitch bends and filter changes are
being manipulated. William Coleman gives a particularly clear example of this
and outlines the difficulty of representing "portamento time", the time it takes
a note to slide from one to the next. The visual results can be jarring,
unintuitive and not reflective of the audio results.

#+begin_caution
Duignan (2008) describes a similar problem in his study that monitored
professional producers working in DAW environments
[[cite:duignan_computer_2008][p. 156]]. The particular problem identified by
Duignan was that of processing one off effects for single musical events. A
number of convoluted processes were observed, including bouncing the affected
portion to audio, duplicating the track, setting up a particular auxiliary for
the effect and controlling the effect with automation. In these cases, the
hierarchy imposed by the DAW gets in the way, where it could be modeled quite
elegantly in a more open program such as Max Msp. This, unfortunately, raises
the issue of drifting into the area of analytic thinking and away from creative
thinking, a combination that John Cage advises against: "Don't try to create and
analyse at the same time. They're different processes." cite:popova_10_2012 The
need to explore alternative metaphors is clear. A description of a promising
alternative metaphor, that of drawing/sketching will now be discussed.
#+end_caution

** Legacy systems
:NOTES:
 * Oramics
 * UPIC
:END:

** Golan Levin etc


* Similar work
#+INCLUDE: "./comparisons.org"

* TODO My approach [0/2]
:NOTES:
 - [ ] Come up with a title
 - [ ] Other stuff
:END:

** Adding allowances for stylus
** Relationship between control data and synths
Discuss Roger Dannenberg conceptualization of the two main paradigms of music
software systems. Resource based vs instance cite:dannenberg_resource-instance_1991 
** Key specifications
** Paper.js
** NUI
Introduce the NUI
** Tone.js
cite:mann_interactive_2015

* Execution
** Early prototypes
*** Melodypainter
Thus far, some early test prototypes to establish possible directions for the
application have been built. A Max Msp patch was created which allows the user
to draw freehand lines, which are converted into break point function data and
used as to generate a melodic profile in Bach. This is further processed into a
pentatonic scale. Once input the system plays the resulting melody back. A
notable flaw of the system was that it required users to draw shapes in a
generally horizontal fashion for the data to be of use and to create a strong
relationship between the visuals and the generated music.

*** Sonicsketch - shape recognition
A separate application was created in Processing which allowed users to draw
shapes, using either mouse or ideally, pen input and have a sound that is
associated with each shape played back. As the sound of each shape plays back,
it is lit up using animation, creating a strong connection between the shape and
it's resulting sound. The application used the "gesture variation follower"
system cite:caramiaux_adaptive_2015, which while promising in principle, didn't
have a high rate of accuracy in recognizing the shapes. It is for this reason
that Microsoft's ink api is now being used for further prototyping.

** The build out
*** Building the framework
**** Advantages of the react.js model of UI programming
*** Stroke functionality
Describe how the stroke functionality works and was implemented.
#+INCLUDE: "./charts.org"
*** Enabling undo and redo
*** Catering for additional input types
Describe issues encountered including a lack of support in paper.js and the
small patch required to enable it.

* Evaluation [0/1]
:NOTES:
 - [ ] Come up with a better title.
:END:

A reasonably functional application was built which allowed for some basic
interactions. While very much a prototype the app does offer the following
innovations:

 - Using the web as a testing ground for new interaction paradigms
 - Using react js and clojurescript to allow for realtime (or close to realtime)
   development
 - Delivering a graphical synthesis oriented system in a very accessible format,
   a PWA
 - Incorporation of alternative device inputs using the W3C pointer api to allow
   for more suitable and accurate input
 - Trial of next generation react framework that extends it's reach beyond html
   markup which is the general limit of the original system
 - The result of combining react, clojurescript and tone.js is a declaritive data
   DSL to describe audio processing. Potentially very useful as a beginner tool
   and as a prototyping tool.
 - Makes the assertion that different tools can be used for different stages of
   the creative process and by providing integration into other platforms can be
   easily incorporated into the flow.
 - Works as an idea generator. The resulting audio could be sampled and used in
   another app
 
Some of the shortcomings of the work:
 - It's very easy to create a mess of frequencies and pitch bends and difficult
  or impossible to create standard musical material
 - Suffers from performance issues and can get choked up when too much elements
   are added to the screen
 - While some basic and standard useability features have been added such as
   undo and redo
 - The sound quality isn't always perfect and some aliasing and other digital
   artifacts are in evidence


* Conclusions and further work
** Future work
 While SonicSketch in it's current format is useable for further ease of use it
 would need work done on performance related issues, including but not limited
 to: 
  - Move more processing into web workers
  - Look at compile to wasm based systems instead of Tone.js, including Csound
  - Move graphics to use the GPU more heavily which would mean re-implementing a
    good deal of the functionality provided by paper.js

 Incorporate more dimensions into the visualisation, such as distortion, delay
 effects, harmonic structure. Investigate how the visualisations could scale up
 to incorporate more information.

 Allow for larger structures, perhaps by scrolling.

 Allow for meta-strokes where a stroke would draw the contents of another scene.

* References
